version: '3.8'
services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: myeca
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-myeca_secure_password}
      POSTGRES_DB: myeca_admin
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myeca"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      # SECURITY: Use secure credentials - avoid exposing in environment
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-CHANGE_THIS_TO_SECURE_PASSWORD}
    volumes:
      - minio_data:/data

  backend:
    build:
      context: ./server
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - ./uploads:/app/uploads
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - FILE_STORAGE_PROVIDER=${FILE_STORAGE_PROVIDER}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_ENDPOINT=http://minio:9000
      - AWS_S3_FORCE_PATH_STYLE=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  frontend:
    build:
      context: ./client
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./client:/app
      - /app/node_modules
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}

  # Automated daily database backup to S3 / MinIO
  db-backup:
    image: alpine:3.20
    depends_on:
      - postgres
    environment:
      - PGHOST=postgres
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=${POSTGRES_DB}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    volumes:
      - pg_backups:/backups
    entrypoint: /bin/sh -c "apk add --no-cache postgresql-client aws-cli && echo '0 2 * * * pg_dump -Fc --no-acl --no-owner -f /backups/$(date +%F).dump && aws s3 cp /backups/$(date +%F).dump s3://${AWS_S3_BUCKET}/db-backups/' > /etc/crontabs/root && crond -f -l 0"

  # Automated file cleanup job
  file-cleanup:
    image: node:20-alpine
    depends_on:
      - postgres
    working_dir: /app
    volumes:
      - ./:/app
    env_file:
      - .env
    entrypoint: /bin/sh -c "npm install && npm run cleanup"
    restart: "no"

  # Loki for log aggregation
  loki:
    image: grafana/loki:3.0.0
    command: -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./docker/loki-config.yml:/etc/loki/loki-config.yml

  # Promtail side-car that ships logs to Loki
  promtail:
    image: grafana/promtail:3.0.0
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    volumes:
      - ./docker/promtail-config.yml:/etc/promtail/promtail.yml
      - postgres_data:/var/lib/postgresql/data:ro
      - ./server/logs:/var/log/smarttaxpro:ro

  # API Service
  api:
    build:
      context: .
      target: api-runner
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: "postgresql://myeca:${DATABASE_PASSWORD:-myeca_secure_password}@postgres:5432/myeca_admin"
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change-me-in-production}
      SESSION_SECRET: ${SESSION_SECRET:-change-me-in-production}
      PORT: 3001
      # Storage
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      STORAGE_PATH: /app/uploads
      # S3 (optional)
      S3_ENDPOINT: ${S3_ENDPOINT:-}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID:-}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY:-}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-}
      S3_REGION: ${S3_REGION:-us-east-1}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # Web Frontend
  web:
    build:
      context: .
      target: web-runner
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - api

  # Database Admin Tool (development only)
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    profiles:
      - dev

volumes:
  postgres_data:
  minio_data:
  pg_backups:
  loki_data:

networks:
  default:
    name: myeca_admin_network
